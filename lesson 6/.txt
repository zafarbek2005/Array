push(â€¦items)
pop()
shift()
unshift(â€¦items)
slice(start, end)
1.push(â€¦items)

Demak, bizda arr oâ€™zgaruvchisi bor va u [1,2,3,4] qiymatini oâ€™zida saqlayapti. Agar biz bu arrayga 5 ni qoâ€™shmoqchi boâ€™lsak nima qilamiz ?

arr.push(5) // [1,2,3,4,5]

push() metodi orqali, har qanday array ning oxiriga har qancha qiymat qoâ€™shishimiz mumkin. Biz hozirgina 5 raqamini arr ga qoâ€™shdik. Agar 6,7,8 ni ham qoâ€™shmoqchi boâ€™lsak, shunchaki:

arr.push(6,7,8); // [1,2,3,4,5,6,7,8]

desak kifoya. Eslatib oâ€™taman, bu metod Arrayning oxiriga yangi qiymat qoâ€™shadi!

2.pop()

Endi agar biz arrayning oxiridan bir qiymatni olib tashlamoqchi boâ€™lsak qanday yoâ€™l tutamiz ?

arr = [1,2,3,4];

arr.pop(); // bu holatda arraydan 4 qiymati olib tashlandi. arr esa [1,2,3] ga teng.

Bu holatda, arrayning oxiridan bitta qiymatni olib tashladik.

3.shift()

Xoâ€™sh, demak biz arrayni oxiridan qiymat olishni oâ€™rgandik, agar arrayning boshidan olishimizga toâ€™gri kelsa qanday yoâ€™l tutamiz ? ðŸ¤¨ðŸ¤”

arr = [1,2,3,4];

arr.shift(); // arr qiymati endi [2,3,4]

bu metod orqali , arrayning boshidagi qiymatni olib tashlashimiz mumkin.

4.unshift()

Nima qoldi yana ? ðŸ¤”

Ha, Arrayning boshiga qiymat qoâ€™shish. Biz oxiriga qoâ€™shishni koâ€™rdik. Ammo boshigachi ?

arr = [3,4,5];

arr.unshift(1,2) // arr ning qiymati endi [1,2,3,4,5] ga teng

demak bu metod orqali biz arraylarning boshiga yangi qiymatlarni qoâ€™shishimiz mumkin ekan.

5.slice(start, end)

Tasavvur qiling, Bizda [1,2,3,4,5,6,7] qiymatlarini oâ€™zida saqlayotgan bir array bor.

Bizga berilgan vazifa shuki, boshqa array yaratib, bu birinchi arraydan faqatgina [3,4,5] qiymatlarini olib yangisiga berish. Yaâ€™ni birinchi array ga tegmagan holda, uni ichidagi ayrim qiymatlarni olib boshqa arrayga joylashtirish. Nima qilamiz ? ðŸ¤¨

slice() metodidan foydalanamiz. Qanday ?

Misol:
let first = [1,2,3,4,5,6,7];

let second = first.slice(2,5) // second = [3,4,5];

Bu yerda slice() metodi birinchi arrayda 2 dan 5 chi indeksgacha boâ€™lgan barcha qiymatlarni ikkinchi arrayga koâ€™chirib olib beradi. Birinchi array ga taâ€™sir koâ€™rsatmagan holda.

Agar biz , 2-indeksdan boshlab qolgan barcha qiymatni olmoqchi boâ€™lsakchi ?

Yaâ€™ni, [3,4,5,6,7] qiymatini. Bu vaziyatda slice metodiga shunchaki ikkinchi argumentni bermaymiz xolos. Yaâ€™ni qayergachaligini aytmaymiz. Metod esa barchasini bizga olib beradi.

P.S: Indekslar 0 dan boshlab sanaladi.

splice()
concat()
forEach()
indexOf()/lastIndexOf()
includes()
splice(start, deleteCount, â€¦elementsToReplace)

Demak, splice() metodidan boshlaymiz.

Bu metod vazifalari:

Arraydan biz xohlagancha miqdorda element(lar)ni oâ€™chirib tashlaydi.
Oâ€™chirilgan element(lar)ni oâ€™rniga yangi elementlarni qoâ€™shadi.
Argumentlari:

start â€“ bu qaysi indeksdan boshlab elementlarni oâ€™chirishni belgilaydi. Misol uchun,birinchi argumentga 2 sonini bersak , metod arrayning ikkinchi indeksidan boshlab elementlarni oâ€™chirishni boshlaydi.
deleteCount â€“ berilgan startdan yaâ€™ni indeksdan boshlab nechta element oâ€™chirish kerakligini aniqlaydi. Misol uchun, splice(2,2) deb yozsak, ikkinchi indeksdan boshlab 2 ta elementni oâ€™chirish kerak degani.
â€¦elementsToReplace â€“ bu argument ixtiyoriy, agar biz oâ€™chirgan elementlar oâ€™rniga yangi elementlarni joylashtirmoqchi boâ€™lsak ishlatamiz.
Endi misollarga oâ€™tamiz:

let arr = [1,2,3,4,5,6];

arr.splice(2,2) // arr = [1,2,5,6];

Bu yerda arraydan [3,4] ni oâ€™chirib tashladik.

let arr = [1,2,3,4,5,6];

arr.splice(2,1, Â«uchÂ») // arr =  [1, 2, Â«uchÂ», 4, 5, 6]

bu yerda esa ikkinchi indeksda turgan 3 sonini oâ€™chirib oâ€™rniga Â«uchÂ» ni yozdik.

Harxil holatlar bilan oâ€™zingiz sinab koâ€™rishingiz mumkin.

Biz esa keyingi metodga oâ€™tamiz. ðŸ˜‰

concat(â€¦items)

Biror bir arrayga boshqa arrayni qoâ€™shib yangi array yaratmoqchi boâ€™lsangiz concat() metodini ishlatsangiz boâ€™ladi. Misol uchun:

let arr = [1,2,3];

let arr2 = [4,5,6];

let newArr = arr.concat(arr2); // newArr = [1,2,3,4,5,6]

forEach(item, index, array)

Looplar haqida maâ€™lumotingiz boâ€™lsa, arraylarni sikl boâ€™ylab yurishimiz uchun tahminan quyidagicha koddan foydalanar edik:

for(let i = 0; i <= arr.length; i++){

console.log(arr[i])

}

yoki, for ..of , for..in lar ham misol boâ€™ladi.

Ammo, Arraylar ustida osonroq ishlashimiz uchun forEach() metodi ham borligini bilarmidingiz.

let arr = [1,2,3];


arr.forEach((item, index, array) => {

  console.log(Â«item: Â» + item); // item: 1, item: 2 , item: 3

  console.log(Â«index: Â» + index); // index: 0, index: 1, index: 2

  console.log(Â«array: Â» + array); // array: [1,2,3], â€¦

})

mana shu usulda ishlashimiz mumkin.

indexOf(item)/lastIndexOf(item)

Agar array ichidagi biror bir qiymatni indeksini bilishimiz kerak boâ€™lib qolsa , indexOf() metodidan foydalanamiz. Misol:

let arr = [5, 8, 3, 6, 3];

arr.indexOf(3); // 2

koâ€™rib turganimizdek 3 qiymatining indeksi 2 .

arr.lastIndexOf(3) // 4

lastIndexOf() esa ushbu berilgan qiymatning oxirgi joylashgan indeksini qaytaradi.

includes(item)

Agar biror bir qiymat ushbu arrayda bor yoki yoâ€™qligini bilmoqchi boâ€™lsak includes() metodidan foydalanamiz. Misol:

let arr = [5, 8, 3, 6, 3];

arr.includes(5) // true

arr.includes(12) // false